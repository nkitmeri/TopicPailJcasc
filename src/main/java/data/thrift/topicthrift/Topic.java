/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package data.thrift.topicthrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Topic implements org.apache.thrift.TBase<Topic, Topic._Fields>, java.io.Serializable, Cloneable, Comparable<Topic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Topic");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_TREND_FIELD_DESC = new org.apache.thrift.protocol.TField("isTrend", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_SERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSeries", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField TREND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("trendDate", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopicTupleSchemeFactory());
  }

  public String name; // required
  public boolean isTrend; // required
  public Map<Integer,Double> timeSeries; // optional
  public long trendDate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    IS_TREND((short)2, "isTrend"),
    TIME_SERIES((short)3, "timeSeries"),
    TREND_DATE((short)4, "trendDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // IS_TREND
          return IS_TREND;
        case 3: // TIME_SERIES
          return TIME_SERIES;
        case 4: // TREND_DATE
          return TREND_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISTREND_ISSET_ID = 0;
  private static final int __TRENDDATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TIME_SERIES,_Fields.TREND_DATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_TREND, new org.apache.thrift.meta_data.FieldMetaData("isTrend", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIME_SERIES, new org.apache.thrift.meta_data.FieldMetaData("timeSeries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "Map")));
    tmpMap.put(_Fields.TREND_DATE, new org.apache.thrift.meta_data.FieldMetaData("trendDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Topic.class, metaDataMap);
  }

  public Topic() {
  }

  public Topic(
    String name,
    boolean isTrend)
  {
    this();
    this.name = name;
    this.isTrend = isTrend;
    setIsTrendIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Topic(Topic other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.isTrend = other.isTrend;
    if (other.isSetTimeSeries()) {
      this.timeSeries = other.timeSeries;
    }
    this.trendDate = other.trendDate;
  }

  public Topic deepCopy() {
    return new Topic(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setIsTrendIsSet(false);
    this.isTrend = false;
    this.timeSeries = null;
    setTrendDateIsSet(false);
    this.trendDate = 0;
  }

  public String getName() {
    return this.name;
  }

  public Topic setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isIsTrend() {
    return this.isTrend;
  }

  public Topic setIsTrend(boolean isTrend) {
    this.isTrend = isTrend;
    setIsTrendIsSet(true);
    return this;
  }

  public void unsetIsTrend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTREND_ISSET_ID);
  }

  /** Returns true if field isTrend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTrend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTREND_ISSET_ID);
  }

  public void setIsTrendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTREND_ISSET_ID, value);
  }

  public int getTimeSeriesSize() {
    return (this.timeSeries == null) ? 0 : this.timeSeries.size();
  }

  public void putToTimeSeries(int key, double val) {
    if (this.timeSeries == null) {
      this.timeSeries = new HashMap<Integer,Double>();
    }
    this.timeSeries.put(key, val);
  }

  public Map<Integer,Double> getTimeSeries() {
    return this.timeSeries;
  }

  public Topic setTimeSeries(Map<Integer,Double> timeSeries) {
    this.timeSeries = timeSeries;
    return this;
  }

  public void unsetTimeSeries() {
    this.timeSeries = null;
  }

  /** Returns true if field timeSeries is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSeries() {
    return this.timeSeries != null;
  }

  public void setTimeSeriesIsSet(boolean value) {
    if (!value) {
      this.timeSeries = null;
    }
  }

  public long getTrendDate() {
    return this.trendDate;
  }

  public Topic setTrendDate(long trendDate) {
    this.trendDate = trendDate;
    setTrendDateIsSet(true);
    return this;
  }

  public void unsetTrendDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRENDDATE_ISSET_ID);
  }

  /** Returns true if field trendDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTrendDate() {
    return EncodingUtils.testBit(__isset_bitfield, __TRENDDATE_ISSET_ID);
  }

  public void setTrendDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRENDDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IS_TREND:
      if (value == null) {
        unsetIsTrend();
      } else {
        setIsTrend((Boolean)value);
      }
      break;

    case TIME_SERIES:
      if (value == null) {
        unsetTimeSeries();
      } else {
        setTimeSeries((Map<Integer,Double>)value);
      }
      break;

    case TREND_DATE:
      if (value == null) {
        unsetTrendDate();
      } else {
        setTrendDate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case IS_TREND:
      return Boolean.valueOf(isIsTrend());

    case TIME_SERIES:
      return getTimeSeries();

    case TREND_DATE:
      return Long.valueOf(getTrendDate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case IS_TREND:
      return isSetIsTrend();
    case TIME_SERIES:
      return isSetTimeSeries();
    case TREND_DATE:
      return isSetTrendDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Topic)
      return this.equals((Topic)that);
    return false;
  }

  public boolean equals(Topic that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_isTrend = true;
    boolean that_present_isTrend = true;
    if (this_present_isTrend || that_present_isTrend) {
      if (!(this_present_isTrend && that_present_isTrend))
        return false;
      if (this.isTrend != that.isTrend)
        return false;
    }

    boolean this_present_timeSeries = true && this.isSetTimeSeries();
    boolean that_present_timeSeries = true && that.isSetTimeSeries();
    if (this_present_timeSeries || that_present_timeSeries) {
      if (!(this_present_timeSeries && that_present_timeSeries))
        return false;
      if (!this.timeSeries.equals(that.timeSeries))
        return false;
    }

    boolean this_present_trendDate = true && this.isSetTrendDate();
    boolean that_present_trendDate = true && that.isSetTrendDate();
    if (this_present_trendDate || that_present_trendDate) {
      if (!(this_present_trendDate && that_present_trendDate))
        return false;
      if (this.trendDate != that.trendDate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Topic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTrend()).compareTo(other.isSetIsTrend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTrend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTrend, other.isTrend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeSeries()).compareTo(other.isSetTimeSeries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSeries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSeries, other.timeSeries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrendDate()).compareTo(other.isSetTrendDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrendDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trendDate, other.trendDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Topic(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTrend:");
    sb.append(this.isTrend);
    first = false;
    if (isSetTimeSeries()) {
      if (!first) sb.append(", ");
      sb.append("timeSeries:");
      if (this.timeSeries == null) {
        sb.append("null");
      } else {
        sb.append(this.timeSeries);
      }
      first = false;
    }
    if (isSetTrendDate()) {
      if (!first) sb.append(", ");
      sb.append("trendDate:");
      sb.append(this.trendDate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isTrend' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicStandardSchemeFactory implements SchemeFactory {
    public TopicStandardScheme getScheme() {
      return new TopicStandardScheme();
    }
  }

  private static class TopicStandardScheme extends StandardScheme<Topic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_TREND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTrend = iprot.readBool();
              struct.setIsTrendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_SERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.timeSeries = new HashMap<Integer,Double>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  int _key2;
                  double _val3;
                  _key2 = iprot.readI32();
                  _val3 = iprot.readDouble();
                  struct.timeSeries.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setTimeSeriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TREND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.trendDate = iprot.readI64();
              struct.setTrendDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsTrend()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isTrend' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Topic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_TREND_FIELD_DESC);
      oprot.writeBool(struct.isTrend);
      oprot.writeFieldEnd();
      if (struct.timeSeries != null) {
        if (struct.isSetTimeSeries()) {
          oprot.writeFieldBegin(TIME_SERIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.timeSeries.size()));
            for (Map.Entry<Integer, Double> _iter4 : struct.timeSeries.entrySet())
            {
              oprot.writeI32(_iter4.getKey());
              oprot.writeDouble(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTrendDate()) {
        oprot.writeFieldBegin(TREND_DATE_FIELD_DESC);
        oprot.writeI64(struct.trendDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicTupleSchemeFactory implements SchemeFactory {
    public TopicTupleScheme getScheme() {
      return new TopicTupleScheme();
    }
  }

  private static class TopicTupleScheme extends TupleScheme<Topic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeBool(struct.isTrend);
      BitSet optionals = new BitSet();
      if (struct.isSetTimeSeries()) {
        optionals.set(0);
      }
      if (struct.isSetTrendDate()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTimeSeries()) {
        {
          oprot.writeI32(struct.timeSeries.size());
          for (Map.Entry<Integer, Double> _iter5 : struct.timeSeries.entrySet())
          {
            oprot.writeI32(_iter5.getKey());
            oprot.writeDouble(_iter5.getValue());
          }
        }
      }
      if (struct.isSetTrendDate()) {
        oprot.writeI64(struct.trendDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.isTrend = iprot.readBool();
      struct.setIsTrendIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.timeSeries = new HashMap<Integer,Double>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            int _key8;
            double _val9;
            _key8 = iprot.readI32();
            _val9 = iprot.readDouble();
            struct.timeSeries.put(_key8, _val9);
          }
        }
        struct.setTimeSeriesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.trendDate = iprot.readI64();
        struct.setTrendDateIsSet(true);
      }
    }
  }

}

